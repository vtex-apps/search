type Query {
  getConfig: GetConfigResponse @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Get top searches for a given store.

  Using paidNavigation filter you'll be able to filter out words that shouldn't be shown
  when the user comes from a paid navigation (e.g. google ads, bing ads).
  """
  topSearches(store: String!, paidNavigation: Boolean): TopSearchesOutput

  """
  Get suggestion searches for a given search term.
  """
  suggestionSearches(store: String!, term: String!): SuggestionSearchesOutput

  """
  Get suggestion products for a given search term.
  """
  suggestionProducts(
    store: String!
    term: String!
    attributeKey: String
    attributeValue: String
  ): SuggestionProductsOutput

  """
  Get attribute keys for a store.
  """
  attributeKeys(store: String!): [AttributeResponseKey]!

  """
  Get attribute values for a given attribute.
  """
  attributeValues(
    store: String!
    attribute: String!
    filters: [ResultRequestAttributeText]
  ): [AttributeResponseValue]!

  searchResult(
    store: String!
    attributePath: String
    query: String
    page: Int
    count: Int
    sort: String
    operator: String
    fuzzy: Int
  ): ResultResponse
}

type GetConfigResponse {
  apiKey: String
  store: String
}

"""
Attribute response key.
"""
type AttributeResponseKey {
  key: String!
  label: String!

  """
  Attribute type, could be either 'text' or 'number'.
  """
  type: String
  visible: Boolean
  values: [AttributeResponseValue]
  minValue: Float
  maxValue: Float
  active: Boolean
  activeFrom: String
  activeTo: String
  templateUrl: String
  proxyUrl: String
}

"""
Attribute response value.
"""
type AttributeResponseValue {
  count: Int
  active: Boolean
  proxyUrl: String

  """
  Only for text attributes.
  """
  key: String

  """
  Only for text attributes.
  """
  label: String

  """
  Only for number attributes.
  """
  from: String

  """
  Only for number attributes.
  """
  to: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""
A Search product, contains all the info about the product. Used in SearchResult.
"""
type ElasticProduct {
  name: String
  id: String
  product: String
  url: String
  oldPrice: Float
  price: Float
  oldPriceText: String
  priceText: String
  brand: String
  stock: Float
  customSort: Float
  availableSpecsCount: Int
  rating: ElasticProductRating
  installment: ElasticProductInstallment
  categories: [String]
  textAttributes: [ElasticProductText]
  numberAttributes: [ElasticProductNumber]
  skus: [ElasticProductSku]
  images: [ElasticProductImage]
  stickers: [ElasticProductSticker]
  extraInfo: [ExtraInfo]
}

"""
A product's seller.
"""
type ElasticProductSeller {
  id: String!
  oldPrice: Float
  price: Float
  stock: Float
  installment: ElasticProductInstallment
}

"""
A product's image.
"""
type ElasticProductImage {
  name: String
  value: String!
}

"""
A product's installment information.
"""
type ElasticProductInstallment {
  count: Int!
  value: Float!
  interest: Boolean!
  valueText: String
}

"""
A key, value interface containing a label version for the key that is suited for UI, the value is a Number.
"""
type ElasticProductNumber {
  key: String
  value: Float
  labelKey: String
}

"""
A product's rating information.
"""
type ElasticProductRating {
  value: Float
  count: Int
}

type ElasticProductSku {
  id: String
  name: String
  icon: String
  image: String
  url: String
  stock: Float
  oldPrice: Float
  price: Float
  oldPriceText: String
  priceText: String
  attributes: [ElasticProductSkuAttribute]
  sellers: [ElasticProductSeller]
}

type ElasticProductSkuAttribute {
  key: String
  value: String
}

"""
A product's sticker information.
"""
type ElasticProductSticker {
  location: String
  name: String
  image: String
  target: String
}

"""
A key, value interface containing a label version for both that is better suited for UI.
"""
type ElasticProductText {
  key: String!
  value: String!
  labelKey: String!
  labelValue: String!
}

"""
Extra information provided for a product.
"""
type ExtraInfo {
  key: String!
  value: String!
}

type PhraseSuggestion {
  text: String
  highlighted: String
  misspelled: Boolean
  correction: Boolean
}

"""
Result Request Attribute Text.
"""
input ResultRequestAttributeText {
  name: String!
  value: String!
}

"""
Search response, contains prouct information and attributes.
"""
type ResultResponse {
  query: String
  operator: String
  total: Int
  products: [ElasticProduct]
  pagination: ResultResponsePagination
  options: SearchOptions
  attributes: [AttributeResponseKey]
  suggestion: SuggestionSearchesOutput
  correction: PhraseSuggestion
}

type ResultResponsePagination {
  count: Int
  current: ResultResponsePaginationItem
  before: [ResultResponsePaginationItem]
  after: [ResultResponsePaginationItem]
  next: ResultResponsePaginationItem
  previous: ResultResponsePaginationItem
  first: ResultResponsePaginationItem
  last: ResultResponsePaginationItem
}

type ResultResponsePaginationItem {
  index: Int
  proxyUrl: String
}

type SearchOptions {
  sorts: [SearchSort]
  counts: [SearchOptionsCount]
}

type SearchOptionsCount {
  count: Int
  active: Boolean
  proxyUrl: String
}

"""
A Search product, contains all the info about the product. Used in Autocomplete.
"""
type SearchProduct {
  id: String!
  name: String!
  url: String!
  images: [ElasticProductImage]
  oldPrice: Float
  price: Float
  oldPriceText: String
  priceText: String
  installment: ElasticProductInstallment
  attributes: [ElasticProductText]
  extraInfo: [ExtraInfo]
  brand: String
  categories: [String]
  product: String
  skus: [ElasticProductSku]
}

type SearchSort {
  field: String
  order: String
  active: Boolean
  proxyUrl: String
}

"""
Result of a SuggestionProducts query, a list of suggestion products.
"""
type SuggestionProductsOutput {
  count: Int!
  products: [SearchProduct]!
}

"""
Suggestion query object, with the term, how many times it was searched and attributes for it.
"""
type SuggestionQueryResponseSearch {
  term: String!
  count: Int!
  attributes: [ElasticProductText]
}

"""
Result of a SuggestionSearches query, a list of suggestion searches.
"""
type SuggestionSearchesOutput {
  searches: [SuggestionQueryResponseSearch]!
}

"""
Result of a TopSearches query, a list of the top searches at a given time.

The amount of queries returned is determined by the Store's search settings.
"""
type TopSearchesOutput {
  searches: [SuggestionQueryResponseSearch]!
}
